/**
 * 279. 完全平方数
给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。

完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。

 

示例 1：

输入：n = 12
输出：3 
解释：12 = 4 + 4 + 4
示例 2：

输入：n = 13
输出：2
解释：13 = 4 + 9
 
提示：

1 <= n <= 10^4
 */


// 动态规划。这是一道非常非常典型的动态规划问题。
// 1. 首先如何定义问题？这个问题就是，f(i)=对于任意一个正整数i，求i由多少个整数平方和组成。
// 2. 如何得到最终问题f(n)？方法就是从1开始计算，f(1)，f(2)，直到f(n)
// 3. 每个f(i)如何计算？每个f(i)只和前面的f值有关！！！
// dp[i] = MIN(dp[i], dp[i - j * j] + 1)
class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            // 最坏的情况就是均由1组成
            dp[i] = i;
            for (int j = 1; j * j <= i; j++) {
                dp[i] = Math.min(dp[i], dp[i - j * j] + 1);
            }
        }

        return dp[n];
    }
}