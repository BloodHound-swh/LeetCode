/**
 * 剑指 Offer 14- II. 剪绳子
给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。请问 k[0]*k[1]*...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。

 

示例 1：

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1
示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
 

提示：

2 <= n <= 1000
 */


/**
 * 大佬解释的为啥这里不能用动态规划取余（大佬的解释真心厉害）
 * 尝试在动态规划的基础上取余，就算把数据类型都换成long也是无解的，对每次的dp[i]取余确实可以避免溢出的问题，但是由于过程中修改了值，会导致最终结果和预期不同。比如
这一步：
dp[i] = Math.max(dp[i] ，x * y );
x * y = 1000000005 ，若dp[i] 本该等于 1000000008 ，但是经过上次取余后变成了1，本来的结果应该是1000000008 ，现在却变成了1000000005，所以在动态规划过程中是不能取余的，那么就只能使用BigInter存储中间结果了

本题的特点是将绳子全部按照长度为3进行切割乘积结果是最大的（证明过程略过，其实贪心本来也可以不需要证明，找不出反例即可）
不过有几种情况需要注意：
(1) 在剩余长度等于4的时候，要取2 * 2，而不是3
(2) 在至少分出1段3的情况下，
剩余n = 2的时候要取2；剩余n = 1的时候要取1

循环取余
所谓循环取余就是每乘一次3就取次余数，为什么这种方法不会像动态规划那样影响最终结果呢，因为本题的动态规划涉及到数的比较，会出现取余后的数和取余前的数相比较的情况，自然会影响后面的结果，而贪心算法的求解过程就是简单的乘法，(100000009 % 1000000007) * 3 和 (100000009 * 3）% 1000000007的结果是一样的

有关int和long型数据范围的分析
(1) int型一共32位，有一位作为符号位，其数据范围是-2^31 ~ 2^31,
即-2147483648 ~ 2147483647；
近似范围可以记为-2000000000 ~ 2000000000 即 - 2 × 10^9 ~ 2 × 10^9
本题中给的模数为1 × 10^9 + 7（1000000007），若再乘以3，就超过了int型的范围，所以要使用long存储结果才不会溢出

(2) long型一共64位，对应int型的方式，long型数据范围可以简单记为：
-8 × 10^18 ~ 8 × 10^18
本题的1000000007平方小于2 × 10^18，所以用long存储模数的平方也是没有问题的
 */
class Solution {
    public int cuttingRope(int n) {
        if(n <= 3) {
            return n - 1;
        }
        long res = 1;
        while(n > 4) {
            res *= 3;
            res %= 1000000007;
            n -= 3;
        }

        return (int) (n * res % 1000000007);
    }
}