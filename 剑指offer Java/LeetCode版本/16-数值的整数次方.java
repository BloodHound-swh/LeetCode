/**
 * 剑指 Offer 16. 数值的整数次方
实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。

 

示例 1：

输入：x = 2.00000, n = 10
输出：1024.00000
示例 2：

输入：x = 2.10000, n = 3
输出：9.26100
示例 3：

输入：x = 2.00000, n = -2
输出：0.25000
解释：2-2 = 1/22 = 1/4 = 0.25
 

提示：

-100.0 < x < 100.0
-231 <= n <= 231-1
-104 <= xn <= 104
 */

// 2^8 -> 4^4 -> 16^2 -> 256
// 2^9 -> 2 * 2^8 -> 2 * 4^4 -> ... -> 2 * 256
class Solution {
    public double myPow(double x, int n) {
        if (n == 0 || x == 1) {
            return 1;
        }

        if (n < 0) {
            // 防止MIN_VALUE取负时溢出，注意前面乘了一个x，所以后面括号里加了1
            return  1 / (x * myPow(x, -(n + 1)));
        }

        double res = 1;
        while (n > 1) {
            if (n % 2 == 1) {
                res = res * x;
            }
            x = x * x;
            n = n / 2;
        }

        res = res * x;
        return res;
    }
}